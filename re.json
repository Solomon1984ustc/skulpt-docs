{
  "prefixMethods": true,
  "overview": "This module provides regular expression matching operations similar to those found in Perl. Both patterns and strings to be searched can be Unicode strings as well as 8-bit strings.<br /><br />Regular expressions use the backslash character ('\\') to indicate special forms or to allow special characters to be used without invoking their special meaning. This collides with Python’s usage of the same character for the same purpose in string literals; for example, to match a literal backslash, one might have to write '\\\\\\\\' as the pattern string, because the regular expression must be \\\\, and each backslash must be expressed as \\\\ inside a regular Python string literal.<br /><br />The solution is to use Python’s raw string notation for regular expression patterns; backslashes are not handled in any special way in a string literal prefixed with 'r'. So r\"\\n\" is a two-character string containing '\\' and 'n', while \"\\n\" is a one-character string containing a newline. Usually patterns will be expressed in Python code using this raw string notation.<br /><br />It is important to note that most regular expression operations are available as module-level functions and RegexObject methods. The functions are shortcuts that don’t require you to compile a regex object first, but miss some fine-tuning parameters.<br /><br />See <a href=\"https://docs.python.org/2/library/re.html\" target=\"_blank\">https://docs.python.org/2/library/re.html</a> and <a href=\"https://docs.python.org/2/howto/regex.html\" target=\"_blank\">https://docs.python.org/2/howto/regex.html</a> for detailed information about regular expressions.",
  "inline_example": "import re\n\nm = re.match(r\"(\\w+) (\\w+)\", \"Isaac Newton, physicist\")\nprint m.group(0)       # The entire match\nprint m.group(1)       # The first parenthesized subgroup.\nprint m.group(2)       # The second parenthesized subgroup.\nprint m.group(1, 2)    # Multiple arguments give us a tuple.\n\nprint\n\n# search finds the first occurence of a pattern\n\nline = \"Isaac Newton and Isaac Asimov and Isaac Hayes walk into a bar\";\n\nprint re.search(r\"Isaac (\\w+)\", line).group()\n",
  "objectMethods": [
    {
      "name": "group",
      "html": "Returns one or more subgroups of the match. If there is a single argument, the result is a single string; if there are multiple arguments, the result is a tuple with one item per argument. Without arguments, group1 defaults to zero (the whole match is returned). If a groupN argument is zero, the corresponding return value is the entire matching string; if it is in the inclusive range [1..99], it is the string matching the corresponding parenthesized group. If a group number is negative or larger than the number of groups defined in the pattern, an IndexError exception is raised. If a group is contained in a part of the pattern that did not match, the corresponding result is None. If a group is contained in a part of the pattern that matched multiple times, the last match is returned."
    },
    {
      "name": "groups",
      "html": "Return a tuple containing all the subgroups of the match, from 1 up to however many groups are in the pattern. The default argument is used for groups that did not participate in the match; it defaults to None."
    },
    {
      "name": "match",
      "docs": "Help on function match in re:\n\nre.match = match(pattern, string, flags=0)\n    Try to apply the pattern at the start of the string, returning\n    a match object, or None if no match was found.\n\n"
    },
    {
      "name": "search",
      "docs": "Help on function search in re:\n\nre.search = search(pattern, string, flags=0)\n    Scan through string looking for a match to the pattern, returning\n    a match object, or None if no match was found.\n\n"
    }
  ],
  "classMethods": [
    {
      "name": "MatchObject",
      "docs": "no Python documentation found for 're.MatchObject'\n\n"
    }
  ]
}