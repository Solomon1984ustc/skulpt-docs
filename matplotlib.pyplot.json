{
  "prefixMethods": true,
  "objectMethods": [
    {
      "name": "axis",
      "docs": "Help on function axis in matplotlib.pyplot:\n\nmatplotlib.pyplot.axis = axis(*v, **kwargs)\n    Convenience method to get or set axis properties.\n    \n    Calling with no arguments::\n    \n      >>> axis()\n    \n    returns the current axes limits ``[xmin, xmax, ymin, ymax]``.::\n    \n      >>> axis(v)\n    \n    sets the min and max of the x and y axes, with\n    ``v = [xmin, xmax, ymin, ymax]``.::\n    \n      >>> axis('off')\n    \n    turns off the axis lines and labels.::\n    \n      >>> axis('equal')\n    \n    changes limits of *x* or *y* axis so that equal increments of *x*\n    and *y* have the same length; a circle is circular.::\n    \n      >>> axis('scaled')\n    \n    achieves the same result by changing the dimensions of the plot box instead\n    of the axis data limits.::\n    \n      >>> axis('tight')\n    \n    changes *x* and *y* axis limits such that all data is shown. If\n    all data is already shown, it will move it to the center of the\n    figure without modifying (*xmax* - *xmin*) or (*ymax* -\n    *ymin*). Note this is slightly different than in MATLAB.::\n    \n      >>> axis('image')\n    \n    is 'scaled' with the axis limits equal to the data limits.::\n    \n      >>> axis('auto')\n    \n    and::\n    \n      >>> axis('normal')\n    \n    are deprecated. They restore default behavior; axis limits are automatically\n    scaled to make the data fit comfortably within the plot box.\n    \n    if ``len(*v)==0``, you can pass in *xmin*, *xmax*, *ymin*, *ymax*\n    as kwargs selectively to alter just those limits without changing\n    the others.\n    \n    The xmin, xmax, ymin, ymax tuple is returned\n    \n    .. seealso::\n    \n        :func:`xlim`, :func:`ylim`\n           For setting the x- and y-limits individually.\n\n"
    },
    {
      "name": "clf",
      "docs": "Help on function clf in matplotlib.pyplot:\n\nmatplotlib.pyplot.clf = clf()\n    Clear the current figure.\n\n"
    },
    {
      "name": "plot",
      "docs": "Help on function plot in matplotlib.pyplot:\n\nmatplotlib.pyplot.plot = plot(*args, **kwargs)\n    Plot lines and/or markers to the\n    :class:`~matplotlib.axes.Axes`.  *args* is a variable length\n    argument, allowing for multiple *x*, *y* pairs with an\n    optional format string.  For example, each of the following is\n    legal::\n    \n        plot(x, y)        # plot x and y using default line style and color\n        plot(x, y, 'bo')  # plot x and y using blue circle markers\n        plot(y)           # plot y using x as index array 0..N-1\n        plot(y, 'r+')     # ditto, but with red plusses\n    \n    If *x* and/or *y* is 2-dimensional, then the corresponding columns\n    will be plotted.\n    \n    An arbitrary number of *x*, *y*, *fmt* groups can be\n    specified, as in::\n    \n        a.plot(x1, y1, 'g^', x2, y2, 'g-')\n    \n    Return value is a list of lines that were added.\n    \n    By default, each line is assigned a different color specified by a\n    'color cycle'.  To change this behavior, you can edit the\n    axes.color_cycle rcParam. Alternatively, you can use\n    :meth:`~matplotlib.axes.Axes.set_default_color_cycle`.\n    \n    The following format string characters are accepted to control\n    the line style or marker:\n    \n    ================    ===============================\n    character           description\n    ================    ===============================\n    ``'-'``             solid line style\n    ``'--'``            dashed line style\n    ``'-.'``            dash-dot line style\n    ``':'``             dotted line style\n    ``'.'``             point marker\n    ``','``             pixel marker\n    ``'o'``             circle marker\n    ``'v'``             triangle_down marker\n    ``'^'``             triangle_up marker\n    ``'<'``             triangle_left marker\n    ``'>'``             triangle_right marker\n    ``'1'``             tri_down marker\n    ``'2'``             tri_up marker\n    ``'3'``             tri_left marker\n    ``'4'``             tri_right marker\n    ``'s'``             square marker\n    ``'p'``             pentagon marker\n    ``'*'``             star marker\n    ``'h'``             hexagon1 marker\n    ``'H'``             hexagon2 marker\n    ``'+'``             plus marker\n    ``'x'``             x marker\n    ``'D'``             diamond marker\n    ``'d'``             thin_diamond marker\n    ``'|'``             vline marker\n    ``'_'``             hline marker\n    ================    ===============================\n    \n    \n    The following color abbreviations are supported:\n    \n    ==========  ========\n    character   color\n    ==========  ========\n    'b'         blue\n    'g'         green\n    'r'         red\n    'c'         cyan\n    'm'         magenta\n    'y'         yellow\n    'k'         black\n    'w'         white\n    ==========  ========\n    \n    In addition, you can specify colors in many weird and\n    wonderful ways, including full names (``'green'``), hex\n    strings (``'#008000'``), RGB or RGBA tuples (``(0,1,0,1)``) or\n    grayscale intensities as a string (``'0.8'``).  Of these, the\n    string specifications can be used in place of a ``fmt`` group,\n    but the tuple forms can be used only as ``kwargs``.\n    \n    Line styles and colors are combined in a single format string, as in\n    ``'bo'`` for blue circles.\n    \n    The *kwargs* can be used to set line properties (any property that has\n    a ``set_*`` method).  You can use this to set a line label (for auto\n    legends), linewidth, anitialising, marker face color, etc.  Here is an\n    example::\n    \n        plot([1,2,3], [1,2,3], 'go-', label='line 1', linewidth=2)\n        plot([1,2,3], [1,4,9], 'rs',  label='line 2')\n        axis([0, 4, 0, 10])\n        legend()\n    \n    If you make multiple lines with one plot command, the kwargs\n    apply to all those lines, e.g.::\n    \n        plot(x1, y1, x2, y2, antialised=False)\n    \n    Neither line will be antialiased.\n    \n    You do not need to use format strings, which are just\n    abbreviations.  All of the line properties can be controlled\n    by keyword arguments.  For example, you can set the color,\n    marker, linestyle, and markercolor with::\n    \n        plot(x, y, color='green', linestyle='dashed', marker='o',\n             markerfacecolor='blue', markersize=12).\n    \n    See :class:`~matplotlib.lines.Line2D` for details.\n    \n    The kwargs are :class:`~matplotlib.lines.Line2D` properties:\n    \n      agg_filter: unknown\n      alpha: float (0.0 transparent through 1.0 opaque)         \n      animated: [True | False]         \n      antialiased or aa: [True | False]         \n      axes: an :class:`~matplotlib.axes.Axes` instance         \n      clip_box: a :class:`matplotlib.transforms.Bbox` instance         \n      clip_on: [True | False]         \n      clip_path: [ (:class:`~matplotlib.path.Path`,         :class:`~matplotlib.transforms.Transform`) |         :class:`~matplotlib.patches.Patch` | None ]         \n      color or c: any matplotlib color         \n      contains: a callable function         \n      dash_capstyle: ['butt' | 'round' | 'projecting']         \n      dash_joinstyle: ['miter' | 'round' | 'bevel']         \n      dashes: sequence of on/off ink in points         \n      drawstyle: ['default' | 'steps' | 'steps-pre' | 'steps-mid' |                   'steps-post']         \n      figure: a :class:`matplotlib.figure.Figure` instance         \n      fillstyle: ['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']         \n      gid: an id string         \n      label: string or anything printable with '%s' conversion.         \n      linestyle or ls: [``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` |                   ``' '`` | ``''``]         and any drawstyle in combination with a linestyle, e.g., ``'steps--'``.         \n      linewidth or lw: float value in points         \n      lod: [True | False]         \n      marker: unknown\n      markeredgecolor or mec: any matplotlib color         \n      markeredgewidth or mew: float value in points         \n      markerfacecolor or mfc: any matplotlib color         \n      markerfacecoloralt or mfcalt: any matplotlib color         \n      markersize or ms: float         \n      markevery: None | integer | (startind, stride)\n      path_effects: unknown\n      picker: float distance in points or callable pick function         ``fn(artist, event)``         \n      pickradius: float distance in points         \n      rasterized: [True | False | None]         \n      sketch_params: unknown\n      snap: unknown\n      solid_capstyle: ['butt' | 'round' |  'projecting']         \n      solid_joinstyle: ['miter' | 'round' | 'bevel']         \n      transform: a :class:`matplotlib.transforms.Transform` instance         \n      url: a url string         \n      visible: [True | False]         \n      xdata: 1D array         \n      ydata: 1D array         \n      zorder: any number         \n    \n    kwargs *scalex* and *scaley*, if defined, are passed on to\n    :meth:`~matplotlib.axes.Axes.autoscale_view` to determine\n    whether the *x* and *y* axes are autoscaled; the default is\n    *True*.\n    \n    Additional kwargs: hold = [True|False] overrides default hold state\n\n"
    },
    {
      "name": "show",
      "docs": "Help on function show in matplotlib.pyplot:\n\nmatplotlib.pyplot.show = show(*args, **kw)\n    Display a figure.\n    \n    When running in ipython with its pylab mode, display all\n    figures and return to the ipython prompt.\n    \n    In non-interactive mode, display all figures and block until\n    the figures have been closed; in interactive mode it has no\n    effect unless figures were created prior to a change from\n    non-interactive to interactive mode (not recommended).  In\n    that case it displays the figures but does not block.\n    \n    A single experimental keyword argument, *block*, may be\n    set to True or False to override the blocking behavior\n    described above.\n\n"
    },
    {
      "name": "title",
      "docs": "Help on function title in matplotlib.pyplot:\n\nmatplotlib.pyplot.title = title(s, *args, **kwargs)\n    Set a title of the current axes.\n    \n    Set one of the three available axes titles. The available titles are\n    positioned above the axes in the center, flush with the left edge,\n    and flush with the right edge.\n    \n    Parameters\n    ----------\n    label : str\n        Text to use for the title\n    fontdict : dict\n        A dictionary controlling the appearance of the title text,\n        the default `fontdict` is:\n        {'fontsize': rcParams['axes.titlesize'],\n         'verticalalignment': 'baseline',\n         'horizontalalignment': loc}\n    loc : {'center', 'left', 'right'}, str, optional\n        Which title to set, defaults to 'center'\n    \n    Returns\n    -------\n    text : :class:`~matplotlib.text.Text`\n        The matplotlib text instance representing the title\n    \n    Other parameters\n    ----------------\n    Other keyword arguments are text properties, see\n    :class:`~matplotlib.text.Text` for a list of valid text\n    properties.\n    \n    See also\n    --------\n    See :func:`~matplotlib.pyplot.text` for adding text to the current axes\n\n"
    },
    {
      "name": "xlabel",
      "docs": "Help on function xlabel in matplotlib.pyplot:\n\nmatplotlib.pyplot.xlabel = xlabel(s, *args, **kwargs)\n    Set the *x* axis label of the current axis.\n    \n    Default override is::\n    \n      override = {\n          'fontsize'            : 'small',\n          'verticalalignment'   : 'top',\n          'horizontalalignment' : 'center'\n          }\n    \n    .. seealso::\n    \n        :func:`~matplotlib.pyplot.text`\n            For information on how override and the optional args work\n\n"
    },
    {
      "name": "ylabel",
      "docs": "Help on function ylabel in matplotlib.pyplot:\n\nmatplotlib.pyplot.ylabel = ylabel(s, *args, **kwargs)\n    Set the *y* axis label of the current axis.\n    \n    Defaults override is::\n    \n        override = {\n           'fontsize'            : 'small',\n           'verticalalignment'   : 'center',\n           'horizontalalignment' : 'right',\n           'rotation'='vertical' : }\n    \n    .. seealso::\n    \n        :func:`~matplotlib.pyplot.text`\n            For information on how override and the optional args\n            work.\n\n"
    }
  ],
  "classMethods": []
}