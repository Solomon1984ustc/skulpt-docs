{
  "prefixMethods": true,
  "objectMethods": [
    {
      "name": "arccos",
      "docs": "arccos(x[, out])\n\nTrigonometric inverse cosine, element-wise.\n\nThe inverse of `cos` so that, if ``y = cos(x)``, then ``x = arccos(y)``.\n\nParameters\n----------\nx : array_like\n    `x`-coordinate on the unit circle.\n    For real arguments, the domain is [-1, 1].\n\nout : ndarray, optional\n    Array of the same shape as `a`, to store results in. See\n    `doc.ufuncs` (Section \"Output arguments\") for more details.\n\nReturns\n-------\nangle : ndarray\n    The angle of the ray intersecting the unit circle at the given\n    `x`-coordinate in radians [0, pi]. If `x` is a scalar then a\n    scalar is returned, otherwise an array of the same shape as `x`\n    is returned.\n\nSee Also\n--------\ncos, arctan, arcsin, emath.arccos\n\nNotes\n-----\n`arccos` is a multivalued function: for each `x` there are infinitely\nmany numbers `z` such that `cos(z) = x`. The convention is to return\nthe angle `z` whose real part lies in `[0, pi]`.\n\nFor real-valued input data types, `arccos` always returns real output.\nFor each value that cannot be expressed as a real number or infinity,\nit yields ``nan`` and sets the `invalid` floating point error flag.\n\nFor complex-valued input, `arccos` is a complex analytic function that\nhas branch cuts `[-inf, -1]` and `[1, inf]` and is continuous from\nabove on the former and from below on the latter.\n\nThe inverse `cos` is also known as `acos` or cos^-1.\n\nReferences\n----------\nM. Abramowitz and I.A. Stegun, \"Handbook of Mathematical Functions\",\n10th printing, 1964, pp. 79. http://www.math.sfu.ca/~cbm/aands/\n\nExamples\n--------\nWe expect the arccos of 1 to be 0, and of -1 to be pi:\n\n>>> np.arccos([1, -1])\narray([ 0.        ,  3.14159265])\n\nPlot arccos:\n\n>>> import matplotlib.pyplot as plt\n>>> x = np.linspace(-1, 1, num=100)\n>>> plt.plot(x, np.arccos(x))\n>>> plt.axis('tight')\n>>> plt.show()"
    },
    {
      "name": "arcsin",
      "docs": "arcsin(x[, out])\n\nInverse sine, element-wise.\n\nParameters\n----------\nx : array_like\n    `y`-coordinate on the unit circle.\n\nout : ndarray, optional\n    Array of the same shape as `x`, in which to store the results.\n    See `doc.ufuncs` (Section \"Output arguments\") for more details.\n\nReturns\n-------\nangle : ndarray\n    The inverse sine of each element in `x`, in radians and in the\n    closed interval ``[-pi/2, pi/2]``.  If `x` is a scalar, a scalar\n    is returned, otherwise an array.\n\nSee Also\n--------\nsin, cos, arccos, tan, arctan, arctan2, emath.arcsin\n\nNotes\n-----\n`arcsin` is a multivalued function: for each `x` there are infinitely\nmany numbers `z` such that :math:`sin(z) = x`.  The convention is to\nreturn the angle `z` whose real part lies in [-pi/2, pi/2].\n\nFor real-valued input data types, *arcsin* always returns real output.\nFor each value that cannot be expressed as a real number or infinity,\nit yields ``nan`` and sets the `invalid` floating point error flag.\n\nFor complex-valued input, `arcsin` is a complex analytic function that\nhas, by convention, the branch cuts [-inf, -1] and [1, inf]  and is\ncontinuous from above on the former and from below on the latter.\n\nThe inverse sine is also known as `asin` or sin^{-1}.\n\nReferences\n----------\nAbramowitz, M. and Stegun, I. A., *Handbook of Mathematical Functions*,\n10th printing, New York: Dover, 1964, pp. 79ff.\nhttp://www.math.sfu.ca/~cbm/aands/\n\nExamples\n--------\n>>> np.arcsin(1)     # pi/2\n1.5707963267948966\n>>> np.arcsin(-1)    # -pi/2\n-1.5707963267948966\n>>> np.arcsin(0)\n0.0"
    },
    {
      "name": "arctan",
      "docs": "arctan(x[, out])\n\nTrigonometric inverse tangent, element-wise.\n\nThe inverse of tan, so that if ``y = tan(x)`` then ``x = arctan(y)``.\n\nParameters\n----------\nx : array_like\n    Input values.  `arctan` is applied to each element of `x`.\n\nReturns\n-------\nout : ndarray\n    Out has the same shape as `x`.  Its real part is in\n    ``[-pi/2, pi/2]`` (``arctan(+/-inf)`` returns ``+/-pi/2``).\n    It is a scalar if `x` is a scalar.\n\nSee Also\n--------\narctan2 : The \"four quadrant\" arctan of the angle formed by (`x`, `y`)\n    and the positive `x`-axis.\nangle : Argument of complex values.\n\nNotes\n-----\n`arctan` is a multi-valued function: for each `x` there are infinitely\nmany numbers `z` such that tan(`z`) = `x`.  The convention is to return\nthe angle `z` whose real part lies in [-pi/2, pi/2].\n\nFor real-valued input data types, `arctan` always returns real output.\nFor each value that cannot be expressed as a real number or infinity,\nit yields ``nan`` and sets the `invalid` floating point error flag.\n\nFor complex-valued input, `arctan` is a complex analytic function that\nhas [`1j, infj`] and [`-1j, -infj`] as branch cuts, and is continuous\nfrom the left on the former and from the right on the latter.\n\nThe inverse tangent is also known as `atan` or tan^{-1}.\n\nReferences\n----------\nAbramowitz, M. and Stegun, I. A., *Handbook of Mathematical Functions*,\n10th printing, New York: Dover, 1964, pp. 79.\nhttp://www.math.sfu.ca/~cbm/aands/\n\nExamples\n--------\nWe expect the arctan of 0 to be 0, and of 1 to be pi/4:\n\n>>> np.arctan([0, 1])\narray([ 0.        ,  0.78539816])\n\n>>> np.pi/4\n0.78539816339744828\n\nPlot arctan:\n\n>>> import matplotlib.pyplot as plt\n>>> x = np.linspace(-10, 10)\n>>> plt.plot(x, np.arctan(x))\n>>> plt.axis('tight')\n>>> plt.show()"
    },
    {
      "name": "arctan2",
      "docs": "arctan2(x1, x2[, out])\n\nElement-wise arc tangent of ``x1/x2`` choosing the quadrant correctly.\n\nThe quadrant (i.e., branch) is chosen so that ``arctan2(x1, x2)`` is\nthe signed angle in radians between the ray ending at the origin and\npassing through the point (1,0), and the ray ending at the origin and\npassing through the point (`x2`, `x1`).  (Note the role reversal: the\n\"`y`-coordinate\" is the first function parameter, the \"`x`-coordinate\"\nis the second.)  By IEEE convention, this function is defined for\n`x2` = +/-0 and for either or both of `x1` and `x2` = +/-inf (see\nNotes for specific values).\n\nThis function is not defined for complex-valued arguments; for the\nso-called argument of complex values, use `angle`.\n\nParameters\n----------\nx1 : array_like, real-valued\n    `y`-coordinates.\nx2 : array_like, real-valued\n    `x`-coordinates. `x2` must be broadcastable to match the shape of\n    `x1` or vice versa.\n\nReturns\n-------\nangle : ndarray\n    Array of angles in radians, in the range ``[-pi, pi]``.\n\nSee Also\n--------\narctan, tan, angle\n\nNotes\n-----\n*arctan2* is identical to the `atan2` function of the underlying\nC library.  The following special values are defined in the C\nstandard: [1]_\n\n====== ====== ================\n`x1`   `x2`   `arctan2(x1,x2)`\n====== ====== ================\n+/- 0  +0     +/- 0\n+/- 0  -0     +/- pi\n > 0   +/-inf +0 / +pi\n < 0   +/-inf -0 / -pi\n+/-inf +inf   +/- (pi/4)\n+/-inf -inf   +/- (3*pi/4)\n====== ====== ================\n\nNote that +0 and -0 are distinct floating point numbers, as are +inf\nand -inf.\n\nReferences\n----------\n.. [1] ISO/IEC standard 9899:1999, \"Programming language C.\"\n\nExamples\n--------\nConsider four points in different quadrants:\n\n>>> x = np.array([-1, +1, +1, -1])\n>>> y = np.array([-1, -1, +1, +1])\n>>> np.arctan2(y, x) * 180 / np.pi\narray([-135.,  -45.,   45.,  135.])\n\nNote the order of the parameters. `arctan2` is defined also when `x2` = 0\nand at several other special points, obtaining values in\nthe range ``[-pi, pi]``:\n\n>>> np.arctan2([1., -1.], [0., 0.])\narray([ 1.57079633, -1.57079633])\n>>> np.arctan2([0., 0., np.inf], [+0., -0., np.inf])\narray([ 0.        ,  3.14159265,  0.78539816])"
    },
    {
      "name": "array",
      "docs": "Help on built-in function array in numpy:\n\nnumpy.array = array(...)\n    array(object, dtype=None, copy=True, order=None, subok=False, ndmin=0)\n    \n    Create an array.\n    \n    Parameters\n    ----------\n    object : array_like\n        An array, any object exposing the array interface, an\n        object whose __array__ method returns an array, or any\n        (nested) sequence.\n    dtype : data-type, optional\n        The desired data-type for the array.  If not given, then\n        the type will be determined as the minimum type required\n        to hold the objects in the sequence.  This argument can only\n        be used to 'upcast' the array.  For downcasting, use the\n        .astype(t) method.\n    copy : bool, optional\n        If true (default), then the object is copied.  Otherwise, a copy\n        will only be made if __array__ returns a copy, if obj is a\n        nested sequence, or if a copy is needed to satisfy any of the other\n        requirements (`dtype`, `order`, etc.).\n    order : {'C', 'F', 'A'}, optional\n        Specify the order of the array.  If order is 'C' (default), then the\n        array will be in C-contiguous order (last-index varies the\n        fastest).  If order is 'F', then the returned array\n        will be in Fortran-contiguous order (first-index varies the\n        fastest).  If order is 'A', then the returned array may\n        be in any order (either C-, Fortran-contiguous, or even\n        discontiguous).\n    subok : bool, optional\n        If True, then sub-classes will be passed-through, otherwise\n        the returned array will be forced to be a base-class array (default).\n    ndmin : int, optional\n        Specifies the minimum number of dimensions that the resulting\n        array should have.  Ones will be pre-pended to the shape as\n        needed to meet this requirement.\n    \n    Returns\n    -------\n    out : ndarray\n        An array object satisfying the specified requirements.\n    \n    See Also\n    --------\n    empty, empty_like, zeros, zeros_like, ones, ones_like, fill\n    \n    Examples\n    --------\n    >>> np.array([1, 2, 3])\n    array([1, 2, 3])\n    \n    Upcasting:\n    \n    >>> np.array([1, 2, 3.0])\n    array([ 1.,  2.,  3.])\n    \n    More than one dimension:\n    \n    >>> np.array([[1, 2], [3, 4]])\n    array([[1, 2],\n           [3, 4]])\n    \n    Minimum dimensions 2:\n    \n    >>> np.array([1, 2, 3], ndmin=2)\n    array([[1, 2, 3]])\n    \n    Type provided:\n    \n    >>> np.array([1, 2, 3], dtype=complex)\n    array([ 1.+0.j,  2.+0.j,  3.+0.j])\n    \n    Data-type consisting of more than one element:\n    \n    >>> x = np.array([(1,2),(3,4)],dtype=[('a','<i4'),('b','<i4')])\n    >>> x['a']\n    array([1, 3])\n    \n    Creating an array from sub-classes:\n    \n    >>> np.array(np.mat('1 2; 3 4'))\n    array([[1, 2],\n           [3, 4]])\n    \n    >>> np.array(np.mat('1 2; 3 4'), subok=True)\n    matrix([[1, 2],\n            [3, 4]])\n\n"
    },
    {
      "name": "asarray",
      "docs": "Help on function asarray in numpy:\n\nnumpy.asarray = asarray(a, dtype=None, order=None)\n    Convert the input to an array.\n    \n    Parameters\n    ----------\n    a : array_like\n        Input data, in any form that can be converted to an array.  This\n        includes lists, lists of tuples, tuples, tuples of tuples, tuples\n        of lists and ndarrays.\n    dtype : data-type, optional\n        By default, the data-type is inferred from the input data.\n    order : {'C', 'F'}, optional\n        Whether to use row-major ('C') or column-major ('F' for FORTRAN)\n        memory representation.  Defaults to 'C'.\n    \n    Returns\n    -------\n    out : ndarray\n        Array interpretation of `a`.  No copy is performed if the input\n        is already an ndarray.  If `a` is a subclass of ndarray, a base\n        class ndarray is returned.\n    \n    See Also\n    --------\n    asanyarray : Similar function which passes through subclasses.\n    ascontiguousarray : Convert input to a contiguous array.\n    asfarray : Convert input to a floating point ndarray.\n    asfortranarray : Convert input to an ndarray with column-major\n                     memory order.\n    asarray_chkfinite : Similar function which checks input for NaNs and Infs.\n    fromiter : Create an array from an iterator.\n    fromfunction : Construct an array by executing a function on grid\n                   positions.\n    \n    Examples\n    --------\n    Convert a list into an array:\n    \n    >>> a = [1, 2]\n    >>> np.asarray(a)\n    array([1, 2])\n    \n    Existing arrays are not copied:\n    \n    >>> a = np.array([1, 2])\n    >>> np.asarray(a) is a\n    True\n    \n    If `dtype` is set, array is copied only if dtype does not match:\n    \n    >>> a = np.array([1, 2], dtype=np.float32)\n    >>> np.asarray(a, dtype=np.float32) is a\n    True\n    >>> np.asarray(a, dtype=np.float64) is a\n    False\n    \n    Contrary to `asanyarray`, ndarray subclasses are not passed through:\n    \n    >>> issubclass(np.matrix, np.ndarray)\n    True\n    >>> a = np.matrix([[1, 2]])\n    >>> np.asarray(a) is a\n    False\n    >>> np.asanyarray(a) is a\n    True\n\n"
    },
    {
      "name": "copy",
      "docs": "Help on function copy in numpy:\n\nnumpy.copy = copy(a, order='K')\n    Return an array copy of the given object.\n    \n    Parameters\n    ----------\n    a : array_like\n        Input data.\n    order : {'C', 'F', 'A', 'K'}, optional\n        Controls the memory layout of the copy. 'C' means C-order,\n        'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n        'C' otherwise. 'K' means match the layout of `a` as closely\n        as possible. (Note that this function and :meth:ndarray.copy are very\n        similar, but have different default values for their order=\n        arguments.)\n    \n    Returns\n    -------\n    arr : ndarray\n        Array interpretation of `a`.\n    \n    Notes\n    -----\n    This is equivalent to\n    \n    >>> np.array(a, copy=True)                              #doctest: +SKIP\n    \n    Examples\n    --------\n    Create an array x, with a reference y and a copy z:\n    \n    >>> x = np.array([1, 2, 3])\n    >>> y = x\n    >>> z = np.copy(x)\n    \n    Note that, when we modify x, y changes, but not z:\n    \n    >>> x[0] = 10\n    >>> x[0] == y[0]\n    True\n    >>> x[0] == z[0]\n    False\n\n"
    },
    {
      "name": "cos",
      "docs": "cos(x[, out])\n\nCosine element-wise.\n\nParameters\n----------\nx : array_like\n    Input array in radians.\nout : ndarray, optional\n    Output array of same shape as `x`.\n\nReturns\n-------\ny : ndarray\n    The corresponding cosine values.\n\nRaises\n------\nValueError: invalid return array shape\n    if `out` is provided and `out.shape` != `x.shape` (See Examples)\n\nNotes\n-----\nIf `out` is provided, the function writes the result into it,\nand returns a reference to `out`.  (See Examples)\n\nReferences\n----------\nM. Abramowitz and I. A. Stegun, Handbook of Mathematical Functions.\nNew York, NY: Dover, 1972.\n\nExamples\n--------\n>>> np.cos(np.array([0, np.pi/2, np.pi]))\narray([  1.00000000e+00,   6.12303177e-17,  -1.00000000e+00])\n>>>\n>>> # Example of providing the optional output parameter\n>>> out2 = np.cos([0.1], out1)\n>>> out2 is out1\nTrue\n>>>\n>>> # Example of ValueError due to provision of shape mis-matched `out`\n>>> np.cos(np.zeros((3,3)),np.zeros((2,2)))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: invalid return array shape"
    },
    {
      "name": "cosh",
      "docs": "cosh(x[, out])\n\nHyperbolic cosine, element-wise.\n\nEquivalent to ``1/2 * (np.exp(x) + np.exp(-x))`` and ``np.cos(1j*x)``.\n\nParameters\n----------\nx : array_like\n    Input array.\n\nReturns\n-------\nout : ndarray\n    Output array of same shape as `x`.\n\nExamples\n--------\n>>> np.cosh(0)\n1.0\n\nThe hyperbolic cosine describes the shape of a hanging cable:\n\n>>> import matplotlib.pyplot as plt\n>>> x = np.linspace(-4, 4, 1000)\n>>> plt.plot(x, np.cosh(x))\n>>> plt.show()"
    },
    {
      "name": "dot",
      "docs": "Help on built-in function dot in numpy:\n\nnumpy.dot = dot(...)\n    dot(a, b, out=None)\n    \n    Dot product of two arrays.\n    \n    For 2-D arrays it is equivalent to matrix multiplication, and for 1-D\n    arrays to inner product of vectors (without complex conjugation). For\n    N dimensions it is a sum product over the last axis of `a` and\n    the second-to-last of `b`::\n    \n        dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m])\n    \n    Parameters\n    ----------\n    a : array_like\n        First argument.\n    b : array_like\n        Second argument.\n    out : ndarray, optional\n        Output argument. This must have the exact kind that would be returned\n        if it was not used. In particular, it must have the right type, must be\n        C-contiguous, and its dtype must be the dtype that would be returned\n        for `dot(a,b)`. This is a performance feature. Therefore, if these\n        conditions are not met, an exception is raised, instead of attempting\n        to be flexible.\n    \n    Returns\n    -------\n    output : ndarray\n        Returns the dot product of `a` and `b`.  If `a` and `b` are both\n        scalars or both 1-D arrays then a scalar is returned; otherwise\n        an array is returned.\n        If `out` is given, then it is returned.\n    \n    Raises\n    ------\n    ValueError\n        If the last dimension of `a` is not the same size as\n        the second-to-last dimension of `b`.\n    \n    See Also\n    --------\n    vdot : Complex-conjugating dot product.\n    tensordot : Sum products over arbitrary axes.\n    einsum : Einstein summation convention.\n    \n    Examples\n    --------\n    >>> np.dot(3, 4)\n    12\n    \n    Neither argument is complex-conjugated:\n    \n    >>> np.dot([2j, 3j], [2j, 3j])\n    (-13+0j)\n    \n    For 2-D arrays it's the matrix product:\n    \n    >>> a = [[1, 0], [0, 1]]\n    >>> b = [[4, 1], [2, 2]]\n    >>> np.dot(a, b)\n    array([[4, 1],\n           [2, 2]])\n    \n    >>> a = np.arange(3*4*5*6).reshape((3,4,5,6))\n    >>> b = np.arange(3*4*5*6)[::-1].reshape((5,4,6,3))\n    >>> np.dot(a, b)[2,3,2,1,2,2]\n    499128\n    >>> sum(a[2,3,2,:] * b[1,2,:,2])\n    499128\n\n"
    },
    {
      "name": "empty",
      "docs": "Help on built-in function empty in numpy:\n\nnumpy.empty = empty(...)\n    empty(shape, dtype=float, order='C')\n    \n    Return a new array of given shape and type, without initializing entries.\n    \n    Parameters\n    ----------\n    shape : int or tuple of int\n        Shape of the empty array\n    dtype : data-type, optional\n        Desired output data-type.\n    order : {'C', 'F'}, optional\n        Whether to store multi-dimensional data in C (row-major) or\n        Fortran (column-major) order in memory.\n    \n    See Also\n    --------\n    empty_like, zeros, ones\n    \n    Notes\n    -----\n    `empty`, unlike `zeros`, does not set the array values to zero,\n    and may therefore be marginally faster.  On the other hand, it requires\n    the user to manually set all the values in the array, and should be\n    used with caution.\n    \n    Examples\n    --------\n    >>> np.empty([2, 2])\n    array([[ -9.74499359e+001,   6.69583040e-309],\n           [  2.13182611e-314,   3.06959433e-309]])         #random\n    \n    >>> np.empty([2, 2], dtype=int)\n    array([[-1073741821, -1067949133],\n           [  496041986,    19249760]])                     #random\n\n"
    },
    {
      "name": "empty_like",
      "docs": "Help on built-in function empty_like in numpy:\n\nnumpy.empty_like = empty_like(...)\n    empty_like(a, dtype=None, order='K', subok=True)\n    \n    Return a new array with the same shape and type as a given array.\n    \n    Parameters\n    ----------\n    a : array_like\n        The shape and data-type of `a` define these same attributes of the\n        returned array.\n    dtype : data-type, optional\n        .. versionadded:: 1.6.0\n        Overrides the data type of the result.\n    order : {'C', 'F', 'A', or 'K'}, optional\n        .. versionadded:: 1.6.0\n        Overrides the memory layout of the result. 'C' means C-order,\n        'F' means F-order, 'A' means 'F' if ``a`` is Fortran contiguous,\n        'C' otherwise. 'K' means match the layout of ``a`` as closely\n        as possible.\n    subok : bool, optional.\n        If True, then the newly created array will use the sub-class\n        type of 'a', otherwise it will be a base-class array. Defaults\n        to True.\n    \n    Returns\n    -------\n    out : ndarray\n        Array of uninitialized (arbitrary) data with the same\n        shape and type as `a`.\n    \n    See Also\n    --------\n    ones_like : Return an array of ones with shape and type of input.\n    zeros_like : Return an array of zeros with shape and type of input.\n    empty : Return a new uninitialized array.\n    ones : Return a new array setting values to one.\n    zeros : Return a new array setting values to zero.\n    \n    Notes\n    -----\n    This function does *not* initialize the returned array; to do that use\n    `zeros_like` or `ones_like` instead.  It may be marginally faster than\n    the functions that do set the array values.\n    \n    Examples\n    --------\n    >>> a = ([1,2,3], [4,5,6])                         # a is array-like\n    >>> np.empty_like(a)\n    array([[-1073741821, -1073741821,           3],    #random\n           [          0,           0, -1073741821]])\n    >>> a = np.array([[1., 2., 3.],[4.,5.,6.]])\n    >>> np.empty_like(a)\n    array([[ -2.00000715e+000,   1.48219694e-323,  -2.00000572e+000],#random\n           [  4.38791518e-305,  -2.00000715e+000,   4.17269252e-309]])\n\n"
    },
    {
      "name": "fill",
      "docs": "no Python documentation found for 'numpy.fill'\n\n"
    },
    {
      "name": "full",
      "docs": "Help on function full in numpy:\n\nnumpy.full = full(shape, fill_value, dtype=None, order='C')\n    Return a new array of given shape and type, filled with `fill_value`.\n    \n    Parameters\n    ----------\n    shape : int or sequence of ints\n        Shape of the new array, e.g., ``(2, 3)`` or ``2``.\n    fill_value : scalar\n        Fill value.\n    dtype : data-type, optional\n        The desired data-type for the array, e.g., `numpy.int8`.  Default is\n        is chosen as `np.array(fill_value).dtype`.\n    order : {'C', 'F'}, optional\n        Whether to store multidimensional data in C- or Fortran-contiguous\n        (row- or column-wise) order in memory.\n    \n    Returns\n    -------\n    out : ndarray\n        Array of `fill_value` with the given shape, dtype, and order.\n    \n    See Also\n    --------\n    zeros_like : Return an array of zeros with shape and type of input.\n    ones_like : Return an array of ones with shape and type of input.\n    empty_like : Return an empty array with shape and type of input.\n    full_like : Fill an array with shape and type of input.\n    zeros : Return a new array setting values to zero.\n    ones : Return a new array setting values to one.\n    empty : Return a new uninitialized array.\n    \n    Examples\n    --------\n    >>> np.full((2, 2), np.inf)\n    array([[ inf,  inf],\n           [ inf,  inf]])\n    >>> np.full((2, 2), 10, dtype=np.int)\n    array([[10, 10],\n           [10, 10]])\n\n"
    },
    {
      "name": "ones",
      "docs": "Help on function ones in numpy:\n\nnumpy.ones = ones(shape, dtype=None, order='C')\n    Return a new array of given shape and type, filled with ones.\n    \n    Parameters\n    ----------\n    shape : int or sequence of ints\n        Shape of the new array, e.g., ``(2, 3)`` or ``2``.\n    dtype : data-type, optional\n        The desired data-type for the array, e.g., `numpy.int8`.  Default is\n        `numpy.float64`.\n    order : {'C', 'F'}, optional\n        Whether to store multidimensional data in C- or Fortran-contiguous\n        (row- or column-wise) order in memory.\n    \n    Returns\n    -------\n    out : ndarray\n        Array of ones with the given shape, dtype, and order.\n    \n    See Also\n    --------\n    zeros, ones_like\n    \n    Examples\n    --------\n    >>> np.ones(5)\n    array([ 1.,  1.,  1.,  1.,  1.])\n    \n    >>> np.ones((5,), dtype=np.int)\n    array([1, 1, 1, 1, 1])\n    \n    >>> np.ones((2, 1))\n    array([[ 1.],\n           [ 1.]])\n    \n    >>> s = (2,2)\n    >>> np.ones(s)\n    array([[ 1.,  1.],\n           [ 1.,  1.]])\n\n"
    },
    {
      "name": "ones_like",
      "docs": "Help on function ones_like in numpy:\n\nnumpy.ones_like = ones_like(a, dtype=None, order='K', subok=True)\n    Return an array of ones with the same shape and type as a given array.\n    \n    Parameters\n    ----------\n    a : array_like\n        The shape and data-type of `a` define these same attributes of\n        the returned array.\n    dtype : data-type, optional\n        .. versionadded:: 1.6.0\n        Overrides the data type of the result.\n    order : {'C', 'F', 'A', or 'K'}, optional\n        .. versionadded:: 1.6.0\n        Overrides the memory layout of the result. 'C' means C-order,\n        'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n        'C' otherwise. 'K' means match the layout of `a` as closely\n        as possible.\n    subok : bool, optional.\n        If True, then the newly created array will use the sub-class\n        type of 'a', otherwise it will be a base-class array. Defaults\n        to True.\n    \n    Returns\n    -------\n    out : ndarray\n        Array of ones with the same shape and type as `a`.\n    \n    See Also\n    --------\n    zeros_like : Return an array of zeros with shape and type of input.\n    empty_like : Return an empty array with shape and type of input.\n    zeros : Return a new array setting values to zero.\n    ones : Return a new array setting values to one.\n    empty : Return a new uninitialized array.\n    \n    Examples\n    --------\n    >>> x = np.arange(6)\n    >>> x = x.reshape((2, 3))\n    >>> x\n    array([[0, 1, 2],\n           [3, 4, 5]])\n    >>> np.ones_like(x)\n    array([[1, 1, 1],\n           [1, 1, 1]])\n    \n    >>> y = np.arange(3, dtype=np.float)\n    >>> y\n    array([ 0.,  1.,  2.])\n    >>> np.ones_like(y)\n    array([ 1.,  1.,  1.])\n\n"
    },
    {
      "name": "ones_like",
      "docs": "Help on function ones_like in numpy:\n\nnumpy.ones_like = ones_like(a, dtype=None, order='K', subok=True)\n    Return an array of ones with the same shape and type as a given array.\n    \n    Parameters\n    ----------\n    a : array_like\n        The shape and data-type of `a` define these same attributes of\n        the returned array.\n    dtype : data-type, optional\n        .. versionadded:: 1.6.0\n        Overrides the data type of the result.\n    order : {'C', 'F', 'A', or 'K'}, optional\n        .. versionadded:: 1.6.0\n        Overrides the memory layout of the result. 'C' means C-order,\n        'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n        'C' otherwise. 'K' means match the layout of `a` as closely\n        as possible.\n    subok : bool, optional.\n        If True, then the newly created array will use the sub-class\n        type of 'a', otherwise it will be a base-class array. Defaults\n        to True.\n    \n    Returns\n    -------\n    out : ndarray\n        Array of ones with the same shape and type as `a`.\n    \n    See Also\n    --------\n    zeros_like : Return an array of zeros with shape and type of input.\n    empty_like : Return an empty array with shape and type of input.\n    zeros : Return a new array setting values to zero.\n    ones : Return a new array setting values to one.\n    empty : Return a new uninitialized array.\n    \n    Examples\n    --------\n    >>> x = np.arange(6)\n    >>> x = x.reshape((2, 3))\n    >>> x\n    array([[0, 1, 2],\n           [3, 4, 5]])\n    >>> np.ones_like(x)\n    array([[1, 1, 1],\n           [1, 1, 1]])\n    \n    >>> y = np.arange(3, dtype=np.float)\n    >>> y\n    array([ 0.,  1.,  2.])\n    >>> np.ones_like(y)\n    array([ 1.,  1.,  1.])\n\n"
    },
    {
      "name": "ones_like",
      "docs": "Help on function ones_like in numpy:\n\nnumpy.ones_like = ones_like(a, dtype=None, order='K', subok=True)\n    Return an array of ones with the same shape and type as a given array.\n    \n    Parameters\n    ----------\n    a : array_like\n        The shape and data-type of `a` define these same attributes of\n        the returned array.\n    dtype : data-type, optional\n        .. versionadded:: 1.6.0\n        Overrides the data type of the result.\n    order : {'C', 'F', 'A', or 'K'}, optional\n        .. versionadded:: 1.6.0\n        Overrides the memory layout of the result. 'C' means C-order,\n        'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n        'C' otherwise. 'K' means match the layout of `a` as closely\n        as possible.\n    subok : bool, optional.\n        If True, then the newly created array will use the sub-class\n        type of 'a', otherwise it will be a base-class array. Defaults\n        to True.\n    \n    Returns\n    -------\n    out : ndarray\n        Array of ones with the same shape and type as `a`.\n    \n    See Also\n    --------\n    zeros_like : Return an array of zeros with shape and type of input.\n    empty_like : Return an empty array with shape and type of input.\n    zeros : Return a new array setting values to zero.\n    ones : Return a new array setting values to one.\n    empty : Return a new uninitialized array.\n    \n    Examples\n    --------\n    >>> x = np.arange(6)\n    >>> x = x.reshape((2, 3))\n    >>> x\n    array([[0, 1, 2],\n           [3, 4, 5]])\n    >>> np.ones_like(x)\n    array([[1, 1, 1],\n           [1, 1, 1]])\n    \n    >>> y = np.arange(3, dtype=np.float)\n    >>> y\n    array([ 0.,  1.,  2.])\n    >>> np.ones_like(y)\n    array([ 1.,  1.,  1.])\n\n"
    },
    {
      "name": "reshape",
      "docs": "Help on function reshape in numpy:\n\nnumpy.reshape = reshape(a, newshape, order='C')\n    Gives a new shape to an array without changing its data.\n    \n    Parameters\n    ----------\n    a : array_like\n        Array to be reshaped.\n    newshape : int or tuple of ints\n        The new shape should be compatible with the original shape. If\n        an integer, then the result will be a 1-D array of that length.\n        One shape dimension can be -1. In this case, the value is inferred\n        from the length of the array and remaining dimensions.\n    order : {'C', 'F', 'A'}, optional\n        Read the elements of `a` using this index order, and place the elements\n        into the reshaped array using this index order.  'C' means to\n        read / write the elements using C-like index order, with the last axis index\n        changing fastest, back to the first axis index changing slowest.  'F'\n        means to read / write the elements using Fortran-like index order, with\n        the first index changing fastest, and the last index changing slowest.\n        Note that the 'C' and 'F' options take no account of the memory layout\n        of the underlying array, and only refer to the order of indexing.  'A'\n        means to read / write the elements in Fortran-like index order if `a` is\n        Fortran *contiguous* in memory, C-like order otherwise.\n    \n    Returns\n    -------\n    reshaped_array : ndarray\n        This will be a new view object if possible; otherwise, it will\n        be a copy.  Note there is no guarantee of the *memory layout* (C- or\n        Fortran- contiguous) of the returned array.\n    \n    See Also\n    --------\n    ndarray.reshape : Equivalent method.\n    \n    Notes\n    -----\n    It is not always possible to change the shape of an array without\n    copying the data. If you want an error to be raise if the data is copied,\n    you should assign the new shape to the shape attribute of the array::\n    \n     >>> a = np.zeros((10, 2))\n     # A transpose make the array non-contiguous\n     >>> b = a.T\n     # Taking a view makes it possible to modify the shape without modifying the\n     # initial object.\n     >>> c = b.view()\n     >>> c.shape = (20)\n     AttributeError: incompatible shape for a non-contiguous array\n    \n    The `order` keyword gives the index ordering both for *fetching* the values\n    from `a`, and then *placing* the values into the output array.  For example,\n    let's say you have an array:\n    \n    >>> a = np.arange(6).reshape((3, 2))\n    >>> a\n    array([[0, 1],\n           [2, 3],\n           [4, 5]])\n    \n    You can think of reshaping as first raveling the array (using the given\n    index order), then inserting the elements from the raveled array into the\n    new array using the same kind of index ordering as was used for the\n    raveling.\n    \n    >>> np.reshape(a, (2, 3)) # C-like index ordering\n    array([[0, 1, 2],\n           [3, 4, 5]])\n    >>> np.reshape(np.ravel(a), (2, 3)) # equivalent to C ravel then C reshape\n    array([[0, 1, 2],\n           [3, 4, 5]])\n    >>> np.reshape(a, (2, 3), order='F') # Fortran-like index ordering\n    array([[0, 4, 3],\n           [2, 1, 5]])\n    >>> np.reshape(np.ravel(a, order='F'), (2, 3), order='F')\n    array([[0, 4, 3],\n           [2, 1, 5]])\n    \n    Examples\n    --------\n    >>> a = np.array([[1,2,3], [4,5,6]])\n    >>> np.reshape(a, 6)\n    array([1, 2, 3, 4, 5, 6])\n    >>> np.reshape(a, 6, order='F')\n    array([1, 4, 2, 5, 3, 6])\n    \n    >>> np.reshape(a, (3,-1))       # the unspecified value is inferred to be 2\n    array([[1, 2],\n           [3, 4],\n           [5, 6]])\n\n"
    },
    {
      "name": "sin",
      "docs": "sin(x[, out])\n\nTrigonometric sine, element-wise.\n\nParameters\n----------\nx : array_like\n    Angle, in radians (:math:`2 pi` rad equals 360 degrees).\n\nReturns\n-------\ny : array_like\n    The sine of each element of x.\n\nSee Also\n--------\narcsin, sinh, cos\n\nNotes\n-----\nThe sine is one of the fundamental functions of trigonometry (the\nmathematical study of triangles).  Consider a circle of radius 1\ncentered on the origin.  A ray comes in from the :math:`+x` axis, makes\nan angle at the origin (measured counter-clockwise from that axis), and\ndeparts from the origin.  The :math:`y` coordinate of the outgoing\nray's intersection with the unit circle is the sine of that angle.  It\nranges from -1 for :math:`x=3pi / 2` to +1 for :math:`pi / 2.`  The\nfunction has zeroes where the angle is a multiple of :math:`pi`.\nSines of angles between :math:`pi` and :math:`2pi` are negative.\nThe numerous properties of the sine and related functions are included\nin any standard trigonometry text.\n\nExamples\n--------\nPrint sine of one angle:\n\n>>> np.sin(np.pi/2.)\n1.0\n\nPrint sines of an array of angles given in degrees:\n\n>>> np.sin(np.array((0., 30., 45., 60., 90.)) * np.pi / 180. )\narray([ 0.        ,  0.5       ,  0.70710678,  0.8660254 ,  1.        ])\n\nPlot the sine function:\n\n>>> import matplotlib.pylab as plt\n>>> x = np.linspace(-np.pi, np.pi, 201)\n>>> plt.plot(x, np.sin(x))\n>>> plt.xlabel('Angle [rad]')\n>>> plt.ylabel('sin(x)')\n>>> plt.axis('tight')\n>>> plt.show()"
    },
    {
      "name": "sinh",
      "docs": "sinh(x[, out])\n\nHyperbolic sine, element-wise.\n\nEquivalent to ``1/2 * (np.exp(x) - np.exp(-x))`` or\n``-1j * np.sin(1j*x)``.\n\nParameters\n----------\nx : array_like\n    Input array.\nout : ndarray, optional\n    Output array of same shape as `x`.\n\nReturns\n-------\ny : ndarray\n    The corresponding hyperbolic sine values.\n\nRaises\n------\nValueError: invalid return array shape\n    if `out` is provided and `out.shape` != `x.shape` (See Examples)\n\nNotes\n-----\nIf `out` is provided, the function writes the result into it,\nand returns a reference to `out`.  (See Examples)\n\nReferences\n----------\nM. Abramowitz and I. A. Stegun, Handbook of Mathematical Functions.\nNew York, NY: Dover, 1972, pg. 83.\n\nExamples\n--------\n>>> np.sinh(0)\n0.0\n>>> np.sinh(np.pi*1j/2)\n1j\n>>> np.sinh(np.pi*1j) # (exact value is 0)\n1.2246063538223773e-016j\n>>> # Discrepancy due to vagaries of floating point arithmetic.\n\n>>> # Example of providing the optional output parameter\n>>> out2 = np.sinh([0.1], out1)\n>>> out2 is out1\nTrue\n\n>>> # Example of ValueError due to provision of shape mis-matched `out`\n>>> np.sinh(np.zeros((3,3)),np.zeros((2,2)))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: invalid return array shape"
    },
    {
      "name": "tan",
      "docs": "tan(x[, out])\n\nCompute tangent element-wise.\n\nEquivalent to ``np.sin(x)/np.cos(x)`` element-wise.\n\nParameters\n----------\nx : array_like\n  Input array.\nout : ndarray, optional\n    Output array of same shape as `x`.\n\nReturns\n-------\ny : ndarray\n  The corresponding tangent values.\n\nRaises\n------\nValueError: invalid return array shape\n    if `out` is provided and `out.shape` != `x.shape` (See Examples)\n\nNotes\n-----\nIf `out` is provided, the function writes the result into it,\nand returns a reference to `out`.  (See Examples)\n\nReferences\n----------\nM. Abramowitz and I. A. Stegun, Handbook of Mathematical Functions.\nNew York, NY: Dover, 1972.\n\nExamples\n--------\n>>> from math import pi\n>>> np.tan(np.array([-pi,pi/2,pi]))\narray([  1.22460635e-16,   1.63317787e+16,  -1.22460635e-16])\n>>>\n>>> # Example of providing the optional output parameter illustrating\n>>> # that what is returned is a reference to said parameter\n>>> out2 = np.cos([0.1], out1)\n>>> out2 is out1\nTrue\n>>>\n>>> # Example of ValueError due to provision of shape mis-matched `out`\n>>> np.cos(np.zeros((3,3)),np.zeros((2,2)))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: invalid return array shape"
    },
    {
      "name": "tanh",
      "docs": "tanh(x[, out])\n\nCompute hyperbolic tangent element-wise.\n\nEquivalent to ``np.sinh(x)/np.cosh(x)`` or ``-1j * np.tan(1j*x)``.\n\nParameters\n----------\nx : array_like\n    Input array.\nout : ndarray, optional\n    Output array of same shape as `x`.\n\nReturns\n-------\ny : ndarray\n    The corresponding hyperbolic tangent values.\n\nRaises\n------\nValueError: invalid return array shape\n    if `out` is provided and `out.shape` != `x.shape` (See Examples)\n\nNotes\n-----\nIf `out` is provided, the function writes the result into it,\nand returns a reference to `out`.  (See Examples)\n\nReferences\n----------\n.. [1] M. Abramowitz and I. A. Stegun, Handbook of Mathematical Functions.\n       New York, NY: Dover, 1972, pg. 83.\n       http://www.math.sfu.ca/~cbm/aands/\n\n.. [2] Wikipedia, \"Hyperbolic function\",\n       http://en.wikipedia.org/wiki/Hyperbolic_function\n\nExamples\n--------\n>>> np.tanh((0, np.pi*1j, np.pi*1j/2))\narray([ 0. +0.00000000e+00j,  0. -1.22460635e-16j,  0. +1.63317787e+16j])\n\n>>> # Example of providing the optional output parameter illustrating\n>>> # that what is returned is a reference to said parameter\n>>> out2 = np.tanh([0.1], out1)\n>>> out2 is out1\nTrue\n\n>>> # Example of ValueError due to provision of shape mis-matched `out`\n>>> np.tanh(np.zeros((3,3)),np.zeros((2,2)))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: invalid return array shape"
    },
    {
      "name": "tolist",
      "docs": "no Python documentation found for 'numpy.tolist'\n\n"
    },
    {
      "name": "zeros",
      "docs": "Help on built-in function zeros in numpy:\n\nnumpy.zeros = zeros(...)\n    zeros(shape, dtype=float, order='C')\n    \n    Return a new array of given shape and type, filled with zeros.\n    \n    Parameters\n    ----------\n    shape : int or sequence of ints\n        Shape of the new array, e.g., ``(2, 3)`` or ``2``.\n    dtype : data-type, optional\n        The desired data-type for the array, e.g., `numpy.int8`.  Default is\n        `numpy.float64`.\n    order : {'C', 'F'}, optional\n        Whether to store multidimensional data in C- or Fortran-contiguous\n        (row- or column-wise) order in memory.\n    \n    Returns\n    -------\n    out : ndarray\n        Array of zeros with the given shape, dtype, and order.\n    \n    See Also\n    --------\n    zeros_like : Return an array of zeros with shape and type of input.\n    ones_like : Return an array of ones with shape and type of input.\n    empty_like : Return an empty array with shape and type of input.\n    ones : Return a new array setting values to one.\n    empty : Return a new uninitialized array.\n    \n    Examples\n    --------\n    >>> np.zeros(5)\n    array([ 0.,  0.,  0.,  0.,  0.])\n    \n    >>> np.zeros((5,), dtype=numpy.int)\n    array([0, 0, 0, 0, 0])\n    \n    >>> np.zeros((2, 1))\n    array([[ 0.],\n           [ 0.]])\n    \n    >>> s = (2,2)\n    >>> np.zeros(s)\n    array([[ 0.,  0.],\n           [ 0.,  0.]])\n    \n    >>> np.zeros((2,), dtype=[('x', 'i4'), ('y', 'i4')]) # custom dtype\n    array([(0, 0), (0, 0)],\n          dtype=[('x', '<i4'), ('y', '<i4')])\n\n"
    }
  ],
  "classMethods": []
}